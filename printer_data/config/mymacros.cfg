[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos  : True   ; use custom park coordinates for x,y [True/False] 
variable_custom_park_x   : 35.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y   : 340.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz  : 50.0    ; custom dz value; the value in mm to lift the nozzle when move to park position 
variable_retract         : 0.4     ; the value to retract while PAUSE
variable_cancel_retract  : 0.4     ; the value to retract while CANCEL_PRINT
variable_speed_retract   : 35.0    ; retract speed in mm/s
variable_unretract       : 0.2     ; the value to unretract while RESUME
variable_speed_unretract : 35.0    ; unretract speed in mm/s
variable_speed_hop       : 15.0    ; z move speed in mm/s
variable_speed_move      : 60      ; move speed in mm/s
variable_park_at_cancel  : False    ; allow to move the toolhead to park while execute CANCEL_PRINT [True,False]
# variable_park_at_cancel_x : 10  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# variable_park_at_cancel_y : 200  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False] 
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
gcode:


# System
variable_stop_bg_services : False # Stops host scheduled tasks during print to avoid high cpu/mem load 

# Print
variable_accel_factor: 1.0 # Global Acceleration Factor (Scales the acceleration value set by the slicer)
variable_use_multi_bed_mesh_profiles: False # PRINT_START tries matching existing bed mesh profiles with set bet temperature. REQ Profiles: "default", "75", "105"

# Filament
variable_my_end_retract: 4 # mm - retract amount at the end of the print. This value is primed back at print start.
variable_my_load_len: 65.0 # distance used for filament load
variable_my_load_prime_len: 75.0 # amount of priming/purging after the filament is loaded
variable_my_unload_len: 50.0 # distance used for filament unload
variable_my_purge_len: 50.0 # filament length used by the manual purge macro

# Purge Line
variable_purge_x: 160 # Bed position to purge start the purge line 
variable_purge_y: 10
variable_purge_z: 0.8
variable_purge_length: 20
variable_purge_amount: 100

# Velocity

variable_velocity_start: 300 # Velocity during PRINT_START in mm/s
variable_accel_start: 10000 # Acceleration during PRINT_START in mm2/s

# Positions
variable_nozzle_heat_x: 20 # Safe spot to heat up nozzle during PRINT START and PAUSE - M600 Filament Change
variable_nozzle_heat_y: 185 
variable_nozzle_heat_z: 30 
variable_change_z_min: 80  # Minimum Z height for PAUSE - M600 Filament Change

[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: 
  RESPOND TYPE=command MSG='Virtual SD error triggered. Starting CANCEL_PRINT'
  CANCEL_PRINT


[gcode_macro CANCEL_PRINT] 
rename_existing: CANCEL_PRINT_BASE
gcode:
  PRINT_END
  CANCEL_PRINT_BASE


[gcode_macro RESET]
description: RESTART
gcode:
  RESTART


[gcode_macro SAFE_HOME_QGL]
description: "Safely home and perform Quad Gantry Leveling"
gcode:
    G28
    QUAD_GANTRY_LEVEL         ; Run quad gantry leveling
    G1 X170 Y185 F12000       ; Move to to bed center
    G1 Z5 F600                ; Move Z to a safe height
    
#[homing_override]
#set_position_z: 5          # Set a safe Z height after homing
#gcode:
#    G91
#    G1 Z5 F600
#    G90                   # Ensure absolute positioning
#    G28 X                 # Home X first
#    G28 Y                 # Home X then Y
#    PROBE_LOCK
#    G1 X175 Y200 F6000    # Move probe to center of bed
#    G28 Z                 # Home Z using the probe
#    PROBE_UNLOCK
#    PROBE_DETACH
#    G1 Z10 F600           # Move Z up to a safe height



[gcode_macro PRINT_START]
gcode:        
    CLEAR_PAUSE
    #SET_LED LED=T0_LED RED=0.5 GREEN=0.5 BLUE=0.5
    SET_PIN PIN=caselight VALUE=0.4
    
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set autopurge = params.AUTOPURGE| default(0) | int %}
    {% set automesh = params.AUTOMESH| default(0) | int %}
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    {% set rt = printer['gcode_macro _CLIENT_VARIABLE_RUNTIME'] %}

    {% if client.stop_bg_services == True %}
      _STOP_CRON  # Stop background host scheduled tasks
    {% endif %}

    SAVE_GCODE_STATE NAME=print_start
    SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE_RUNTIME VARIABLE=end_park VALUE=False
    G90 
    M83

    RESPOND TYPE=command MSG='Heating Bed. Please wait'
    M190 S{bedtemp} # Heat bed and wait
    M104 S{hotendtemp-60} # Pre-heat hotend to target-60C to prevent oozing 
    
    RESPOND TYPE=command MSG='Homing printer'
    SET_VELOCITY_LIMIT VELOCITY={client.velocity_start} ACCEL={client.accel_start} # Lower velocity for setup moves
    G28 X
    G28 Y
    ATTACH_PROBE_LOCK
    G28 Z
    QUAD_GANTRY_LEVEL
    G28 Z
    
    {% if automesh == 0 %}  # Selecting bed mesh based on temperature. REQ Profiles: "default", "75", "105"
      RESPOND TYPE=command MSG='Automesh OFF. Loading saved mesh'
      {% if client.use_multi_bed_mesh_profiles == True %}
        {% if bedtemp > 95 %}
          BED_MESH_PROFILE LOAD=105
        {% elif bedtemp > 69 %}
          BED_MESH_PROFILE LOAD=75
        {% else %}
          BED_MESH_PROFILE LOAD=default
        {% endif %}
      {% else %}
         BED_MESH_PROFILE LOAD=default
      {% endif %}
    {% elif automesh == -1 %}  # Skip bed mesh 
      RESPOND TYPE=command MSG='Automesh disabled. Continuing'
      BED_MESH_CLEAR
    {% else %}
      BED_MESH_CLEAR
      BED_MESH_CALIBRATE ADAPTIVE=1
      SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE_RUNTIME VARIABLE=automeshed VALUE=True
      G28 Z
    {% endif %}

    DOCK_PROBE_UNLOCK
    
    G1 X{client.nozzle_heat_x} Y{client.nozzle_heat_y} Z{client.nozzle_heat_z} F3000  # Safe spot to heat up nozzle
    RESPOND TYPE=command MSG='Heating Hotend. Please wait'
    M109 S{hotendtemp} # Heat hotend and wait
    
    {% if autopurge == 0 %}
      G1 E{client.my_end_retract} F{10*60} # Prime nozzle
    {% else %}
      _PURGE_LINE
    {% endif %}
    
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}  # Restore velocity to default
    G92 E0 # Reset Extruder
    RESPOND TYPE=command MSG='Print Started'
    RESTORE_GCODE_STATE NAME=print_start
    G90



[gcode_macro PRINT_END]
gcode:
    TURN_OFF_HEATERS # Safety call in case of any other move fails
    
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    {% set rt = printer['gcode_macro _CLIENT_VARIABLE_RUNTIME'] %}
    {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                else printer[printer.toolhead.extruder].can_extrude %}     # status of active extruder
    
    G90 # Absolute Position
    M83 # Relative Extrude
    G92 E0 # Reset Extruder

    {% if "xyz" in printer.toolhead.homed_axes and can_extrude == True %}
      G1 E-0.2 F{60*60} # Tiny retract at end Print 
      {% set z_move = [printer.toolhead.axis_maximum.z, printer.toolhead.position.z+4] | min  %} # Hop
      G1 X40 Z{z_move} E-0.8 F{60*400} # Print end retract 

      #Tip Forming and Filament Park
      {% if client.my_end_retract > 0 %}
        G1 E-{(client.my_end_retract)*0.5} F{10*60}
        G1 E{(client.my_end_retract)*0.5} F{80*60}
        G1 E-{(client.my_end_retract)} F{10*80}
      {% endif %}
    {% endif %}
 
    RESPOND TYPE=command MSG='Print Ended! Turning things off.'
    
    {% if rt.automeshed == True %}  # Clear Adaptive Bed Mesh
      BED_MESH_CLEAR
    {% endif %}

    G90 # Absolute positioning
    {% if rt.end_park == False %}
      _TOOLHEAD_PARK_PAUSE_CANCEL
      SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE_RUNTIME VARIABLE=end_park VALUE=True
    {% endif %}
    OFF

    {% if client.stop_bg_services == True %}
      _START_CRON  # Enable background host scheduled tasks
    {% endif %}

    #SET_LED LED=T0_LED RED=0 GREEN=0 BLUE=0
    SET_PIN PIN=caselight VALUE=0
    M117 Done!



[gcode_macro OFF]
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    M84                                  # turn steppers off
    TURN_OFF_HEATERS                     # turn bed / hotend off
    M107                                 # turn fans off
    M106.1 S0                            # force part fan off
    {% if client.has_aux_fan == True %}  # force aux fan off
      SET_FAN_SPEED FAN=aux SPEED=0
    {% endif %}
    #SET_FAN_SPEED FAN=Exhaust SPEED=0   # turn exhaust fan off
    #SET_FAN_SPEED FAN=BedFans SPEED=0   # bed fan off
    #SET_PIN PIN=caselight VALUE=0       # turn case light off
    RESPOND TYPE=command MSG='All OFF'



[gcode_macro M109] # Wait Hotend Temp
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-5} MAXIMUM={s+5}   # Wait for hotend temp (within n degrees)
    {% endif %}




[gcode_macro M190] # Wait Bed Temp
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   # Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-5} MAXIMUM={s+5}  # Wait for bed temp (within n degrees)
    {% endif %}



[gcode_macro _PURGE_LINE] # Purge line
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    G90 
    M83
    G0 X{client.purge_x} Y{client.purge_y} Z{client.purge_z} F12000
    G1 E{client.my_end_retract} F500
    G1 X{client.purge_x+client.purge_length} Y{client.purge_y} E{0.2*client.purge_amount} F500
    G1 X{client.purge_x+client.purge_length+5} E-0.2 F1000
    G1 Y{client.purge_y+30} Z{client.purge_z+10} E-0.5 F18000 
    G1 E0.2 F600

##### Acceleration #####
  

[gcode_macro SET_VELOCITY_LIMIT] # Set Velocity Limits 
rename_existing: _SET_VELOCITY_LIMIT
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    {% set rt = printer['gcode_macro _CLIENT_VARIABLE_RUNTIME'] %}
    {% set base_params = "" %}
    
    {% if rt.q_active == False %} # Normal behaviour
    
        {% if 'VELOCITY' in params %}
        {% set base_params = base_params ~ ' VELOCITY=' ~ params.VELOCITY %}
        {% endif %}
  
        {% if 'ACCEL' in params %}
          {% set adjusted_accel = params.ACCEL|int * client.accel_factor %}
          {% set base_params = base_params ~ ' ACCEL=' ~ adjusted_accel %}
        {% endif %}
        
        {% if 'MINIMUM_CRUISE_RATIO' in params %}
          {% set base_params = base_params ~ ' MINIMUM_CRUISE_RATIO=' ~ params.MINIMUM_CRUISE_RATIO %}
        {% endif %}
        
        {% if 'SQUARE_CORNER_VELOCITY' in params %}
          {% set base_params = base_params ~ ' SQUARE_CORNER_VELOCITY=' ~ params.SQUARE_CORNER_VELOCITY %}
        {% endif %}
      
        _SET_VELOCITY_LIMIT {base_params}
    
    {% else %} # Qmode behaviour

        {% if 'VELOCITY' in params %}
          {% set get_params = (base_params ~ ' VELOCITY=' ~ [params.VELOCITY|int, client.q_max_velocity | int] | min | string) %}
        {% endif %}
        {% if 'ACCEL' in params %}
          {% set lim_accel = [(params.ACCEL | float * client.q_accel_factor)|int, client.q_max_accel | int] | min %}
          {% set get_params = (base_params ~ ' ACCEL=' ~ lim_accel | string) %}
        {% endif %}
        {% if 'SQUARE_CORNER_VELOCITY' in params %}
          {% set get_params = (base_params ~ ' SQUARE_CORNER_VELOCITY=' ~ [params.SQUARE_CORNER_VELOCITY|int, client.q_scv | int] | min | string) %}
        {% endif %}
        {% if 'MINIMUM_CRUISE_RATIO' in params %}
          {% set get_params = (base_params ~ ' MINIMUM_CRUISE_RATIO=' ~ [params.MINIMUM_CRUISE_RATIO|float, client.q_min_cruise | float] | max | string) %}
        {% endif %}
       
        _SET_VELOCITY_LIMIT {get_params}
    
    {% endif %}



[gcode_macro M204] # Set Acceleration
rename_existing: M204.1

gcode:
    {% if 'P' in params %}
      {% set my_s = params.P %}
    {% elif 'S' in params %}
      {% set my_s = params.S %}
    {% elif 'T' in params %}
      {% set my_s = params.T %}
    {% endif %}
    {% if my_s is defined %}
      SET_VELOCITY_LIMIT ACCEL={my_s|float}  
    {% endif %}



#### Fans #####

[gcode_macro M106] #Set Fan
rename_existing: M106.1

gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    {% set rt = printer['gcode_macro _CLIENT_VARIABLE_RUNTIME'] %}
    {% set vars = printer["gcode_macro M106"] %}
        
    {% if 'S' in params and params.P is not defined %} # Part fan control
      {% if rt.manual_fan < 0 %} # normal mode
        {% set S = params.S|float %}
        {% set S = [(S * rt.fan_multiplier), (rt.max_fan*2.55)] | min %} 
      {% else %}
          {% set S = rt.manual_fan*2.55 %} # manual mode
      {% endif %}
      M106.1 S{'%d' % (S)}
      {% if client.has_aux_fan == True and client.link_aux == True and rt.manual_aux < 0 %}  
        SET_FAN_SPEED FAN=aux SPEED={(S/255)*client.aux_ratio}  # linked aux mode
      {% endif %}  
    {% endif %}

    {% if 'S' in params and params.P is defined and client.has_aux_fan == True %} # When P2 (AUX) value is present
      {% set S = params.S|float %}
        {% if rt.manual_aux < 0 and  client.link_aux == False %} # normal unlinked aux mode
            {% set S = [(S * rt.fan_multiplier), (rt.max_fan*2.55)] | min %} 
            SET_FAN_SPEED FAN=aux SPEED={S/255}
        {% elif rt.manual_aux >= 0 %}  # manual aux
          SET_FAN_SPEED FAN=aux SPEED={rt.manual_aux/100}
        {% endif %}
    {% endif %}



[gcode_macro MAX_FAN] #Set Fan UI
description: Set max fan speed or override it to manual control

gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  
  {% set MAX_FAN_P = params.MAX_FAN | default(0) | int %}                 # Maximum value that the slicer can set
  {% set FAN_MULTIPLIER_P = params.FAN_MULTIPLIER | default(0) | float %} # Global fan multplier
  {% set MANUAL_FAN_P = params.MANUAL_FAN | default(0) | int %}           # -1 = Manual fan disabled, Manual fan control = 0-100, Slicer control off 
  {% set MANUAL_AUX_P = params.MANUAL_AUX | default(0) | int %}           # -1 = Manual fan disabled, Manual fan control = 0-100, Slicer control off 
  {% set LINK_AUX_P = params.LINK_AUX | default(0) | int %}               #  Links Aux fan to Part fan
  {% set AUX_RATIO_P = params.AUX_RATIO | default(0) | float %}           #  Aux fan multiply factor when linked to Part fan

  {% if 'MAX_FAN' in params %}
  SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE_RUNTIME VARIABLE=max_fan VALUE={MAX_FAN_P}
  RESPOND MSG="Setting MAX_FAN to: {MAX_FAN_P}" 
  {% endif %}
  {% if 'MANUAL_FAN' in params %}
  SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE_RUNTIME VARIABLE=manual_fan VALUE={MANUAL_FAN_P}
  RESPOND MSG="Setting MANUAL_FAN to: {MANUAL_FAN_P}" 
  {% endif %}
  {% if 'MANUAL_AUX' in params %}
  SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE_RUNTIME VARIABLE=manual_aux VALUE={MANUAL_AUX_P}
  RESPOND MSG="Setting MANUAL_AUX to: {MANUAL_AUX_P}" 
  {% endif %}
  {% if 'FAN_MULTIPLIER' in params %}
  SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE_RUNTIME VARIABLE=fan_multiplier VALUE={FAN_MULTIPLIER_P}
  RESPOND MSG="Setting FAN_MULTIPLIER to: {FAN_MULTIPLIER_P}" 
  {% endif %}
  {% if 'LINK_AUX' in params %}
  SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=link_aux VALUE={LINK_AUX_P}
  RESPOND MSG="Setting LINK_AUX to: {LINK_AUX_P}" 
  {% endif %}
  {% if 'AUX_RATIO' in params %}
  SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=aux_ratio VALUE={AUX_RATIO_P}
  RESPOND MSG="Setting AUX_RATIO to: {AUX_RATIO_P}" 
  {% endif %}

  M106 S{printer.fan.speed*255.0}

  {% if client.has_aux_fan == True %}
    M106 P2 S{printer['fan_generic aux'].speed*255.0} 
  {% endif %}
  


[gcode_macro M107] # Fans OFF
rename_existing: M107.1
gcode:
    M106 S0
    M106 P2 S0



##### Filament Management #####

[gcode_macro M600]
description: Filament change
gcode: 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  PAUSE X={client.nozzle_heat_x} Y={client.nozzle_heat_y} Z_MIN={client.change_z_min}
  FILAMENT_UNLOAD
  RESPOND TYPE=command MSG='Load next filament and Resume'



[gcode_macro FILAMENT_LOAD]
gcode:
  _CLOSE_UI
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set EXTRUDER_TEMP = params.TEMP|default(0) | int %}
  {% if EXTRUDER_TEMP == 0 %}
    {% if printer['extruder'].target >= 220 %}
      {% set EXTRUDER_TEMP = printer['extruder'].target %}
    {% else %}
      {% set EXTRUDER_TEMP = 220 %}
    {% endif %}
  {% endif %}
  M109 S{EXTRUDER_TEMP}            #set hotend temperature and wait
  SAVE_GCODE_STATE NAME=load_state
  
  M83                                              # set extruder to relative
  G1 E{client.my_load_len} F800                    # load
  G1 E{client.my_load_prime_len} F250              # prime nozzle with filament
  G1 E-8 F600
  
  RESTORE_GCODE_STATE NAME=load_state
  M400 # wait to finish above
  RESPOND TYPE=command MSG='Filament Loaded'
  _FILAMENT_MANAGEMENT_END



[gcode_macro FILAMENT_UNLOAD]
gcode:
  _CLOSE_UI
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set EXTRUDER_TEMP = params.TEMP|default(0) | int %}
  {% if EXTRUDER_TEMP == 0 %}
    {% if printer['extruder'].target >= 220 %}
      {% set EXTRUDER_TEMP = printer['extruder'].target %}
    {% else %}
      {% set EXTRUDER_TEMP = 220 %}
    {% endif %}
  {% endif %}
  M109 S{EXTRUDER_TEMP}            #set hotend temperature and wait

  SAVE_GCODE_STATE NAME=unload_state
  #M106 S0 # Turn off fan
  M83                                               # set extruder to relative
  G0 E2 F300                                        # extract filament to cold end
  G0 E-8 F2000                                      # extract filament to cold end
  G4 P4000                                          # wait for 4 seconds
  G0 E8 F2000                                       # push back the filament to strive stringing
  G0 E-22 F2150                                     # Extract fast in the cold zone
  G1 E-{client.my_unload_len} F300                  # Pull rest. Continue extraction slow allow filament to be cooled enough before reaches the gears
  
  RESTORE_GCODE_STATE NAME=unload_state
  M400 # wait to finish above
  RESPOND TYPE=command MSG='Filament Unloaded'
  _FILAMENT_MANAGEMENT_END



[gcode_macro FILAMENT_PURGE]
gcode:
  _CLOSE_UI
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  SAVE_GCODE_STATE NAME=purge_state
  #M106 S0 # Turn off fan
  M83    
  G1 E{client.my_purge_len} F250                    # prime nozzle with filament
  RESTORE_GCODE_STATE NAME=purge_state
  M400 # wait to finish above
  RESPOND TYPE=command MSG='Filament Purged'
  _FILAMENT_MANAGEMENT_END

  

[gcode_macro _COOLDOWN]
gcode:
  M104 S0
  _CLOSE_UI



[gcode_macro _FILAMENT_MANAGEMENT_END]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Filament Management"
    RESPOND TYPE=command MSG="action:prompt_text Proceed:"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Load|FILAMENT_LOAD|primary"
    RESPOND TYPE=command MSG="action:prompt_button Unload|FILAMENT_UNLOAD|warning"
    RESPOND TYPE=command MSG="action:prompt_button Purge|FILAMENT_PURGE|secondary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Close|_CLOSE_UI|error"
    RESPOND TYPE=command MSG="action:prompt_button Resume|RESUME|default"
    RESPOND TYPE=command MSG="action:prompt_button Cooldown|_COOLDOWN|default"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"  
    RESPOND TYPE=command MSG="action:prompt_show"
  


[gcode_macro COLD_PULL]  # Experimental. Requires lowering extruder print min temp to ~80C # When you hear the extruder perform the last fast retraction, go and pull out the filament by hand 
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(220) %}
    {% set PULLTEMP = params.PULLTEMP|default(85) %}
    G90
    M83
    G92 E0
    M109 S{EXTRUDER} 
    M104 S{PULLTEMP}
    M106 S120   #fan on
    FORCE_MOVE STEPPER=extruder DISTANCE=7 VELOCITY=2 ACCEL=200
    FORCE_MOVE STEPPER=extruder DISTANCE=5 VELOCITY=1 ACCEL=200
    M109 S{PULLTEMP}
    FORCE_MOVE STEPPER=extruder DISTANCE=-25 VELOCITY=1 ACCEL=200
    FORCE_MOVE STEPPER=extruder DISTANCE=-50 VELOCITY=4 ACCEL=200
    FORCE_MOVE STEPPER=extruder DISTANCE=-150 VELOCITY=50 ACCEL=600

    M400 # wait to finish above
    RESPOND TYPE=command MSG='Remove Filament Now!'
    G92 E0
    M106 S0
    M104 S0
    


 ##### Force Moves #####

[gcode_macro FORCE_UP]
gcode:
  SET_KINEMATIC_POSITION X=173 Y=172 Z=150
  G90
  G1 Z180 F600
  M84



[gcode_macro FORCE_DOWN]
gcode:
  SET_KINEMATIC_POSITION X=173 Y=172 Z=150
  G90
  G1 Z120 F600
  M84



[gcode_macro FORCE_SET_POS]
gcode:

    {% if 'resonance_tester' in printer.configfile.settings %}
    {% set home = printer.configfile.settings.resonance_tester.probe_points[0] %}
    {% endif %}

    {% set K_X = params.X | default(home[0] if home else 127 ) | float %}
    {% set K_Y = params.Y | default(home[1] if home else 127) | float %}
    {% set K_Z = params.Z | default(home[2] if home else 0) | float %}

    SET_KINEMATIC_POSITION X={K_X} Y={K_Y} Z={K_Z}

    # Moving To Full step positions:
    G91
    G1 X0.1 Y0.1 Z0.025
    SET_KINEMATIC_POSITION X={K_X} Y={K_Y} Z={K_Z}
    G90
    # Done
    
    # Cycling motion
    G91
    G1 X0.001 Y0.001 Z0.001
    G1 X-0.001 Y-0.001 Z-0.001
    G90 



[gcode_macro DISABLE]
gcode:
  M84



##### Park by Ellis #####

# Park front center
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           # home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               # absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           # home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              # absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           # home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              # absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           # home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               # absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           # home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                # absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED




#### Utilities ####

[gcode_macro VIBRATION_TEST]  # Change accel per hz in printer.cfg under resonace_holder
gcode:
  # Axis
  {% set axis = params.AXIS|string %}
  # Seconds
  {% set seconds = params.SECONDS|int %}
  #Freq
  {%set int = params.FREQ| int%}
  HOLD_RESONANCE {rawparams}



[gcode_macro AWD_SYNC]
description: Remember to move the bed to the center and loosen the front stepper pulley grub screws 
gcode:
    {% set iterations = params.ITERATIONS|default(4)|int %}
    {% set p_time = params.PAUSE_TIME|default(0)|int %}
  
    {% for i in range(iterations) %}
      SET_KINEMATIC_POSITION X=117 Y=117 Z=20 
      G91
      ### Moving to full step motor position
      G1 X0.1 Y0.1 Z0.025
      
      G1 X0.02 Y0.02 Z0.05
      G1 X-0.02 Y-0.02 Z-0.05
      {% if i < (iterations-1) %}
        M84
      {% endif %}
      G4 P500
      {% if i == 1 %}
        G4 P{1000*p_time}
      {% endif %}
    {% endfor %}
    G90
    # Done



[gcode_macro Z_OFFSET_PRINT]
description: Prints the z offset value
gcode: 
    {% set config = printer.configfile.config %}
    # Find probe config in configfile
    {% if config["probe"] %}
        # probe section found
        {% set probe = config["probe"] %}
        {% set has_probe = True %}
    {% else %}
        # No probe or bltouch sections found
        RESPOND MSG="Failed to detect probe in configfile"
    {% endif %}
    {% if has_probe %}
        RESPOND MSG="Configured Probe Z-Offset {probe.z_offset}"
        RESPOND MSG="Last Probed value was {printer.probe.last_z_result}"
    {% endif %}



[gcode_macro SET_ACCEL_FACTOR]
description: Scale acceleration value by factor
gcode: 
    {% set factor = params.FACTOR|default(1)|float %}
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    RESPOND TYPE=command MSG='Previous ACCEL FACTOR: {client.accel_factor}'
    SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=accel_factor VALUE={factor}
    RESPOND TYPE=command MSG='New ACCEL FACTOR: {factor}'



[gcode_macro _DUMP_VARIABLES]  # by Ellis
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}



[gcode_macro _STOP_CRON]
gcode:
    RUN_SHELL_COMMAND CMD=stop_cron

[gcode_shell_command stop_cron]
command: /etc/init.d/cron stop
timeout: 10.
verbose: True



[gcode_macro _START_CRON]
gcode:
    RUN_SHELL_COMMAND CMD=start_cron

[gcode_shell_command start_cron]
command: /etc/init.d/cron start
timeout: 10.
verbose: True



[delayed_gcode start_cron]
initial_duration: 1
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    {% if client.stop_bg_services == True %}
      _START_CRON  # Enable background host scheduled tasks
    {% endif %}


##### UI #####


## https://docs.mainsail.xyz/overview/features/macro-prompts

[gcode_macro _SHOW_DEMO_BUTTON_GROUPS]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin MacroPrompt"
    RESPOND TYPE=command MSG="action:prompt_text These are all button colors"
    RESPOND TYPE=command MSG="action:prompt_button Close|_CLOSE_UI|error"
    RESPOND TYPE=command MSG="action:prompt_button default|TEST"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button primary|TEST|primary"
    RESPOND TYPE=command MSG="action:prompt_button secondary|TEST|secondary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button info|Z_OFFSET_PRINT|info"
    RESPOND TYPE=command MSG="action:prompt_button warning|TEST|warning"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _CLOSE_UI]
gcode:
    RESPOND TYPE=command MSG="action:prompt_end"

    
##### RUNTIME VARIABLES #####


[gcode_macro _CLIENT_VARIABLE_RUNTIME]


### LH Stinger Utility Variables    # Don't change manually! Internal utility variables used by macros. 
variable_required_version: 2.0
variable_automeshed: False    # Used internally by other macros to track the autogenerated bed mesh.
variable_max_fan: 100 # Part of MAX_FAN
variable_manual_fan: -1 # Part of MAX_FAN
variable_manual_aux: -1 # Part of MAX_FAN
variable_fan_multiplier: 1.0 # Part of MAX_FAN
variable_q_active: False # Part of Qmode
variable_end_park: False # if toolhead was parked already at print end

gcode:
