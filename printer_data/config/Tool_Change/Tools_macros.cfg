[gcode_macro TOOLCHANGE_DEMO]
gcode:
    {% for n in range(10) %}
      T{ printer.toolchanger.tool_numbers | random }
    {% endfor %}

#[gcode_macro G32]
#gcode:
#    BED_MESH_CLEAR
#    QUAD_GANTRY_LEVEL
#    G28 Z

[gcode_macro PRINT_STATUS]
gcode:
  {% set obj = params.OBJ %}
  RESPOND TYPE=echo MSG="Status for M190 {obj} is { printer[obj] }"

[gcode_macro _CLEAN_NOZZLE]
description: Clean nozzle on nozzle cleaning pad.
gcode:
  G90
  RESPOND TYPE=echo MSG="Cleaning nozzle"
  {% set heater =  printer.toolhead.extruder %}
  M104 S{params.TEMP}
  
  G0 X160 Y100 F5000
  G0 X160 Y-4.5 Z5 F5000
  TEMPERATURE_WAIT SENSOR={heater} MINIMUM={params.TEMP}
  M104 S0 # Set temp to 0
  G0 Z0.5
  G0 X120 F5000
  G0 X155 F5000
  G0 X124 F5000
  G0 X121 F5000
  G0 X118 Z1 F5000
  G0 Z0 F5000
  TEMPERATURE_WAIT SENSOR={heater} MAXIMUM=120
  G0 Z20
  G0 Y20

[gcode_macro UNSAFE_LOWER_BED]
description: Lower the bed 100mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=100
  G0 Z0 F600
  M84

[gcode_macro UNSAFE_RAISE_BED]
description: Raise the bed 100mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z100 F600
  M84

[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 150 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}


[gcode_macro PRINT_START]
gcode:
  SET_LED LED=led RED=1 GREEN=0.4 BLUE=0
  M140 S{ params.BED_TEMP }

  M117 initializing  
  INITIALIZE_TOOLCHANGER
  STOP_TOOL_PROBE_CRASH_DETECTION # Initialization starts this if printing, cancel it.
  M117 homing
  G28
  M117 Cleaning the nozzle
  _CLEAN_NOZZLE TEMP={ params.TOOL_TEMP|int - 20 }

  M117 Heating up the bed
  TEMPERATURE_WAIT SENSOR="temperature_fan buildplate" MINIMUM={ params.BED_TEMP|float * 0.94 }
  M190 S{ params.BED_TEMP }

  M117 Calibrating bed
  M109 S150 ; Heat up nozzle to soften any leftover filament for homing.
  G32 ; Home, gantry tram
  #SETUP_KAMP_MESHING ADAPTIVE_ENABLE=1
  #BED_MESH_CLEAR
  #BED_MESH_CALIBRATE
  
  BED_MESH_PROFILE LOAD=defaultt_220_90_2

  M109 S0 # Stop to heat, the actual printing may happen with a different hotend.

  # Preheat all the hotends in use
  {% for tool_nr in printer.toolchanger.tool_numbers %}
    {% set tooltemp_param = 'T' ~ tool_nr|string ~ '_TEMP' %}
    {% if tooltemp_param in params %}
      M104 T{tool_nr} S{params[tooltemp_param]}
    {% endif %}
  {% endfor %}

  {% if params.TOOL is defined %}
    T{params.TOOL}
  {% endif %}

  M117 Heating up the hotend
  G90 ; Absolute positioning
  G92 E0 ; Zero extruder
  M106 S100 ; Start part cooling fan, 255=100%
  G0 X345 Y175 Z1 F3000
  G0 Z0.2 F300 ;Move the nozle down
  M109 S{ params.TOOL_TEMP }
  G0 Z1 F300 ;Move up a bit
  START_TOOL_PROBE_CRASH_DETECTION
  M117 Printing
  SET_LED LED=led RED=0.7 GREEN=0.7 BLUE=0.5

[gcode_macro PRINT_END]
gcode:
    STOP_TOOL_PROBE_CRASH_DETECTION
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament

    G91                            ; relative positioning
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 20) %}
        {% set z_safe = 20.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    G0 Z{z_safe} F3600             ; move nozzle up

    TURN_OFF_HEATERS
    M107                           ; turn off fan
    M140                           ; turn off bed

    G90                            ; absolute positioning
    {% set tool = printer[printer.toolchanger.tool] %}
    G0 X{tool.params_park_x} Y{tool.params_safe_y} Z350 F3600          ; park nozzle up top
    M18                            ; Motors off
    M117 Print done
    SET_LED LED=led RED=0 GREEN=0 BLUE=0

[gcode_macro LOAD_FILAMENT]
gcode:
  M117 Loading
  M104 S240
  G90 ; Absolute pos
  G1 X100 Y00 Z90 F1800 ; Move to center
  M104 S240 ;Heat up the filament
  TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM=240
  M83                            ; set extruder to relative
  G1 E50 F300                   ; extrude 5 cm
  G1 E50 F300                   ; extrude 5 cm
  G1 E-4 F1800                  ; retract some
  M82                           ; set extruder to absolute
  M400                          ; wait for buffer to clear
  M104 S0                       ; Stop heating
  M117 Loading done

[gcode_macro UNLOAD_FILAMENT]
gcode:
  M117 Unloading
  M104 S240 ;Heat up the filament
  TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM=240
  M83                           ; set extruder to relative
  G1 E5 F500                   ; extrude 5 mm
  G1 E-50 F1000                   ; retract 5 cm
  G1 E-50 F1000                   ; retract 5 cm
  M82                            ; set extruder to absolute
  M400                          ; wait for buffer to clear
  TURN_OFF_HEATERS
  M117 Unloading done


[gcode_macro UNLOAD_ONE_FILAMENT]
gcode:
  M117 Unloading {params.TOOL}
  M109 T{params.TOOL} S240 ;Wait until heated
  {% set tool_name = printer.toolchanger.tool_names[params.TOOL|int] %}
  {% set extruder = printer[tool_name].extruder %}
  M104 T{params.TOOL} S240 ;Heat up the filament
  TEMPERATURE_WAIT SENSOR={extruder} MINIMUM=240
  ACTIVATE_EXTRUDER EXTRUDER={extruder}
  M83                           ; set extruder to relative
  G1 E5 F500                   ; extrude 5 mm
  G1 E-50 F1000                   ; retract 5 cm
  G1 E-50 F1000                   ; retract 5 cm
  M82                            ; set extruder to absolute
  M400                          ; wait for buffer to clear
  TURN_OFF_HEATERS
  M117 Unloading done

[gcode_macro UNLOAD_ALL_FILAMENT]
gcode:
  {% set tools = printer.toolchanger.tool_names %}
  M117 Unloading
  {% for tool in tools %}
    M104 T{printer[tool].tool_number} S240 ;Heat up the filament
  {% endfor %}
  {% for tool in tools %}
    M109 T{printer[tool].tool_number} S240 ;Wait until heated
    ACTIVATE_EXTRUDER EXTRUDER={printer[tool].extruder}
    M83                           ; set extruder to relative
    G1 E5 F500                     ; extrude 5 mm
    G1 E-50 F1000                   ; retract 5 cm
    G1 E-50 F1000                   ; retract 5 cm
  {% endfor %}
  M400                          ; Finish all th emoves
  M82                            ; set extruder to absolute
  TURN_OFF_HEATERS
  M117 Unloading done

[gcode_macro CHANGE_NOZZLE]
gcode:
  M117 Nozzle change
  M104 S240
  G90 ; Absolute pos
  G1 X175 Y0 Z100 F1800 ; Move to front
  M109 S240 ;Heat up the filament
  M83                            ; set extruder to relative
  G1 E5 F250                   ; extrude 5 mm
  G1 E-50 F1000                ; retract 5 cm
  M82                            ; set extruder to absolute
  M117 Ready to swap

# Example config to setup per-tool probing and tool detection.
# Used in per-tool-probe examples

[tool_probe_endstop]
  crash_gcode:
    RESPOND TYPE=error MSG='Tool not detected, expected {printer.toolchanger.tool_number}. Pausing the print.' 
    M84
    TURN_OFF_HEATERS

[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
## This part is used with TAP Probe
#      G90 ; absolute mode
#      G0 Z10 F1000
#      {% set tool = printer.toolchanger.tool %}
#      {% if tool %}
#         {% set tool_z_offset = printer[tool].gcode_z_offset %}
#         {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
#         SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
#      {% endif %}

## This part is used with Klicky Probe
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
       {% set tool_z_offset = printer[tool].gcode_z_offset %}
       {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
       SET_KINEMATIC_POSITION Z={safe_z+probe_z_offset|float}
#       SET_KINEMATIC_POSITION Z={safe_z-tool_z_offset|float+probe_z_offset|float}
    {% endif %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    ; Apply gcode offsets
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
      SET_GCODE_OFFSET X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}
    {% endif %}

[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL]
gcode:
  SET_ACTIVE_TOOL_PROBE T={printer['toolchanger'].detected_tool_number}
  _INITIALIZE_FROM_DETECTED_TOOL_IMPL

[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL_IMPL]
gcode:
  {% if printer['toolchanger'].detected_tool_number | int == -1 %}
    RESPOND TYPE=error MSG='Failed to detect active tool'
    PAUSE
  {% else %}
    { action_respond_info('initialize from detected tool')}
    INITIALIZE_TOOLCHANGER T={printer['toolchanger'].detected_tool_number}
  {% endif %}

# per tool probe is not yet integrated with toolchanger tool detection. This macro adds a stopgap.
[gcode_macro VERIFY_TOOL_DETECTED]
rename_existing: VERIFY_TOOL_DETECTED_ORIG
gcode:
    G4 P200
    SET_ACTIVE_TOOL_PROBE T={printer['toolchanger'].detected_tool_number}
    _STOP_IF_INCORRECT_TOOL {rawparams}

[gcode_macro _STOP_IF_INCORRECT_TOOL]
gcode:
#    {% if T in params and printer.tool_probe_endstop.active_tool_number | int != params.T | int %}
    {% if T in params and printer['toolchanger'].detected_tool_number | int != params.T | int %}
       RESPOND TYPE=error MSG='Tool not detected, expected {params.T}. Pausing the print.'
       M112
#    {% elif printer.tool_probe_endstop.active_tool_number | int == -1%}
    {% elif printer['toolchanger'].detected_tool_number | int == -1%}
       RESPOND TYPE=error MSG='No tool detected. Pausing the print.'
       M112
    {% endif %}
